generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id               String    @id @default(cuid())
    name             String
    email            String    @unique
    username         String?
    title            String?
    location         String?
    organization     String?
    emailVerified    DateTime?
    hashedPassword   String?
    image            String?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    stripeCustomerId String?
    pupa             Int       @default(0)

    accounts        Account[]
    createdThemes   Theme[]         @relation("ThemeOwner")
    likedThemes     UserLikeTheme[]
    savedThemes     UserSaveTheme[]
    purchaseHistory Purchase[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Theme {
    id             String   @id @default(cuid())
    name           String
    description    String?
    userId         String
    color_1        String
    color_1_reason String
    color_2        String
    color_2_reason String
    color_3        String
    color_3_reason String
    color_4        String
    color_4_reason String
    font_1         String
    font_1_reason  String
    font_2         String
    font_2_reason  String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    prompt         String?
    isPrivate      Boolean
    isAIGenerated  Boolean

    user    User            @relation("ThemeOwner", fields: [userId], references: [id])
    likedBy UserLikeTheme[]
    savedBy UserSaveTheme[]
    tags    ThemeTag[]

    @@index([userId])
}

model UserLikeTheme {
    userId  String
    themeId String
    likedAt DateTime @default(now())

    user  User  @relation(fields: [userId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([userId, themeId])
    @@index([themeId])
    @@index([userId])
}

model UserSaveTheme {
    userId  String
    themeId String
    savedAt DateTime @default(now())

    user  User  @relation(fields: [userId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([userId, themeId])
    @@index([themeId])
    @@index([userId])
}

model Tag {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())

    themes ThemeTag[]

    @@unique([name])
}

model ThemeTag {
    tagId   String
    themeId String

    tag   Tag   @relation(fields: [tagId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([tagId, themeId])
    @@index([themeId])
    @@index([tagId])
}

model Purchase {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    stripeSessionId  String
    stripeCustomerId String

    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@index([userId])
}
