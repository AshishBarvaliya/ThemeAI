generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id             String    @id @default(cuid())
    name           String
    email          String    @unique
    emailVerified  DateTime?
    hashedPassword String?
    image          String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    accounts      Account[]
    createdThemes Theme[]         @relation("ThemeOwner")
    likedThemes   UserLikeTheme[]
    savedThemes   UserSaveTheme[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Theme {
    id        String   @id @default(cuid())
    color_1   String
    color_2   String
    color_3   String
    color_4   String
    font_1    String
    font_2    String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    prompt    String
    isPrivate Boolean

    user    User            @relation("ThemeOwner", fields: [userId], references: [id], onDelete: Cascade)
    likedBy UserLikeTheme[]
    savedBy UserSaveTheme[]
    tags    ThemeTag[]

    @@index([userId])
}

model UserLikeTheme {
    userId  String
    themeId String

    user  User  @relation(fields: [userId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([userId, themeId])
    @@index([themeId])
    @@index([userId])
}

model UserSaveTheme {
    userId  String
    themeId String

    user  User  @relation(fields: [userId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([userId, themeId])
    @@index([themeId])
    @@index([userId])
}

model Tag {
    id   String @id @default(cuid())
    name String

    themes ThemeTag[]

    @@unique([name])
}

model ThemeTag {
    tagId   String
    themeId String

    tag   Tag   @relation(fields: [tagId], references: [id])
    theme Theme @relation(fields: [themeId], references: [id])

    @@id([tagId, themeId])
    @@index([themeId])
    @@index([tagId])
}
